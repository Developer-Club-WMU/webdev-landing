// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  tasks         Task[]
  Pipeline      Pipeline[]
  Lead          Lead[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Task {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([status])
  @@index([priority])
  @@index([dueDate])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  BLOCKED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Defines a pipeline defined by a user
model Pipeline {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // How we map a relation to the User table
  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  segmentData PipelineSegmentData[]
  segments    PipelineSegment[]
  Lead        Lead[]
}

// This is the column
model PipelineSegment {
  id         Int      @id @default(autoincrement())
  name       String // e.g., "started", "verified", "ended"
  deleted    Boolean  @default(false)
  pipeline   Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  pipelineId String

  segmentData PipelineSegmentData[]
  Lead        Lead[]

  @@unique([pipelineId, name]) // name must be unique per pipeline
}

// Card with data that belongs to a column
model PipelineSegmentData {
  id         Int      @id @default(autoincrement())
  pipeline   Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  pipelineId String

  segment   PipelineSegment @relation(fields: [segmentId], references: [id], onDelete: Cascade)
  segmentId Int

  completedAt DateTime? // Optional: when this segment was completed
  notes       String? // Optional: data or remarks about this stage

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([pipelineId, segmentId]) // Each segment only once per pipeline
}

// Lead model for pipeline management
model Lead {
  id            String    @id @default(cuid())
  title         String
  description   String?
  capitalValue  Int?      @default(0)
  contactName   String
  companyName   String
  avatarURL     String?
  addedOn       DateTime  @default(now())
  dueDate       DateTime?
  status        String    @default("new") // LeadStatus as string
  leadType      String    @default("customer") // LeadType as string
  pipelineStage String?
  isArchived    Boolean   @default(false)
  source        String?
  tags          String[] // Array of strings for tags

  // Relations
  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  // Pipeline relation
  pipeline   Pipeline? @relation(fields: [pipelineId], references: [id], onDelete: SetNull)
  pipelineId String?

  // Segment relation
  segment   PipelineSegment? @relation(fields: [segmentId], references: [id], onDelete: SetNull)
  segmentId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([pipelineId])
  @@index([segmentId])
}
